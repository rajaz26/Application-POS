enum UserRole {
  GENERAL_MANAGER
  CASHIER
  WAREHOUSE_MANAGER
  PURCHASER
}

enum BillStatus {
  PENDING
  CONFIRMED
  PAID
}

type Store {
  id: ID!
  name: String!
  address: String
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  products(filter: ModelProductFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductConnection
  bills(filter: ModelBillFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBillConnection
  purchaseOrder(filter: ModelPurchaseOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPurchaseOrderConnection
  warehouseScan(filter: ModelWarehouseScanFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelWarehouseScanConnection
  billItems(filter: ModelBillItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBillItemConnection
  category(filter: ModelCategoryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCategoryConnection
  notifications(filter: ModelNotificationsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotificationsConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Category {
  id: ID!
  name: String!
  description: String
  product(filter: ModelProductFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductConnection
  store: Store
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeCategoryId: ID
}

type Notifications {
  id: ID!
  warehousequanity: Int
  shelfquantity: Int
  productID: ID
  productname: String
  isRead: Boolean
  isWarehouseNotification: Boolean
  isShelfNotification: Boolean
  store: Store
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeNotificationsId: ID
}

type User {
  id: ID!
  userId: ID!
  username: String!
  phonenumber: String!
  image: String
  role: UserRole!
  idcardimage: [String]
  store: Store
  bills: String
  purchaseOrders: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeUsersId: ID
}

type Product {
  id: ID!
  name: String!
  barcode: String!
  image: String
  price: Float!
  manufacturer: String
  category: String
  category1: Category
  warehouseQuantity: Int!
  shelfQuantity: Int!
  warehouseInventoryLimit: Int
  shelfInventoryLimit: Int
  store: Store
  billItems(filter: ModelBillItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBillItemConnection
  purchaseItems(filter: ModelPurchaseItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPurchaseItemConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeProductsId: ID
  categoryProductId: ID
}

type BillItem {
  id: ID!
  product: Product!
  productName: String
  quantity: Int!
  productPrice: Float!
  subtotal: Float!
  category: String
  manufacturer: String
  bill: Bill
  store: Store
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeBillItemsId: ID
  productBillItemsId: ID
  billItemsId: ID!
}

type Bill {
  id: ID!
  cashier: String!
  cashierName: String
  items(filter: ModelBillItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBillItemConnection
  totalAmount: Float!
  status: BillStatus!
  store: Store
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeBillsId: ID
}

type PurchaseOrder {
  id: ID!
  purchaser: ID!
  purchaserName: String
  vendor: String
  store: Store
  items(filter: ModelPurchaseItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPurchaseItemConnection
  totalAmount: Float!
  status: BillStatus
  purchaseItems(filter: ModelPurchaseItemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPurchaseItemConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storePurchaseOrderId: ID
}

type PurchaseItem {
  id: ID!
  product: Product!
  productName: String
  productPrice: Float
  quantityOrdered: Int!
  quantityReceived: Int!
  purchaseOrder: PurchaseOrder
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  productPurchaseItemsId: ID
  purchaseOrderItemsId: ID!
  purchaseOrderPurchaseItemsId: ID
}

type WarehouseScan {
  id: ID!
  scannedBy: ID
  scannedByName: String
  productId: ID
  productName: String
  productQuantity: Int
  store: Store
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  storeWarehouseScanId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelStoreConnection {
  items: [Store]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStoreFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  address: ModelStringInput
  and: [ModelStoreFilterInput]
  or: [ModelStoreFilterInput]
  not: ModelStoreFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getStore(id: ID!): Store
  listStores(filter: ModelStoreFilterInput, limit: Int, nextToken: String): ModelStoreConnection
  syncStores(filter: ModelStoreFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelStoreConnection
  getCategory(id: ID!): Category
  listCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  syncCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCategoryConnection
  getNotifications(id: ID!): Notifications
  listNotifications(filter: ModelNotificationsFilterInput, limit: Int, nextToken: String): ModelNotificationsConnection
  syncNotifications(filter: ModelNotificationsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelNotificationsConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  syncProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProductConnection
  getBillItem(id: ID!): BillItem
  listBillItems(filter: ModelBillItemFilterInput, limit: Int, nextToken: String): ModelBillItemConnection
  syncBillItems(filter: ModelBillItemFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelBillItemConnection
  getBill(id: ID!): Bill
  listBills(filter: ModelBillFilterInput, limit: Int, nextToken: String): ModelBillConnection
  syncBills(filter: ModelBillFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelBillConnection
  getPurchaseOrder(id: ID!): PurchaseOrder
  listPurchaseOrders(filter: ModelPurchaseOrderFilterInput, limit: Int, nextToken: String): ModelPurchaseOrderConnection
  syncPurchaseOrders(filter: ModelPurchaseOrderFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPurchaseOrderConnection
  getPurchaseItem(id: ID!): PurchaseItem
  listPurchaseItems(filter: ModelPurchaseItemFilterInput, limit: Int, nextToken: String): ModelPurchaseItemConnection
  syncPurchaseItems(filter: ModelPurchaseItemFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPurchaseItemConnection
  getWarehouseScan(id: ID!): WarehouseScan
  listWarehouseScans(filter: ModelWarehouseScanFilterInput, limit: Int, nextToken: String): ModelWarehouseScanConnection
  syncWarehouseScans(filter: ModelWarehouseScanFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelWarehouseScanConnection
  userById(userId: ID!, id: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  productByName(name: String!, id: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  productByBarcode(barcode: String!, id: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  billByCashierId(cashier: String!, id: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelBillFilterInput, limit: Int, nextToken: String): ModelBillConnection
  poByPurchaserId(purchaser: ID!, id: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPurchaseOrderFilterInput, limit: Int, nextToken: String): ModelPurchaseOrderConnection
}

input ModelStoreConditionInput {
  name: ModelStringInput
  address: ModelStringInput
  and: [ModelStoreConditionInput]
  or: [ModelStoreConditionInput]
  not: ModelStoreConditionInput
  _deleted: ModelBooleanInput
}

input CreateStoreInput {
  id: ID
  name: String!
  address: String
  _version: Int
}

input UpdateStoreInput {
  id: ID!
  name: String
  address: String
  _version: Int
}

input DeleteStoreInput {
  id: ID!
  _version: Int
}

type Mutation {
  createStore(input: CreateStoreInput!, condition: ModelStoreConditionInput): Store
  updateStore(input: UpdateStoreInput!, condition: ModelStoreConditionInput): Store
  deleteStore(input: DeleteStoreInput!, condition: ModelStoreConditionInput): Store
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category
  createNotifications(input: CreateNotificationsInput!, condition: ModelNotificationsConditionInput): Notifications
  updateNotifications(input: UpdateNotificationsInput!, condition: ModelNotificationsConditionInput): Notifications
  deleteNotifications(input: DeleteNotificationsInput!, condition: ModelNotificationsConditionInput): Notifications
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
  createBillItem(input: CreateBillItemInput!, condition: ModelBillItemConditionInput): BillItem
  updateBillItem(input: UpdateBillItemInput!, condition: ModelBillItemConditionInput): BillItem
  deleteBillItem(input: DeleteBillItemInput!, condition: ModelBillItemConditionInput): BillItem
  createBill(input: CreateBillInput!, condition: ModelBillConditionInput): Bill
  updateBill(input: UpdateBillInput!, condition: ModelBillConditionInput): Bill
  deleteBill(input: DeleteBillInput!, condition: ModelBillConditionInput): Bill
  createPurchaseOrder(input: CreatePurchaseOrderInput!, condition: ModelPurchaseOrderConditionInput): PurchaseOrder
  updatePurchaseOrder(input: UpdatePurchaseOrderInput!, condition: ModelPurchaseOrderConditionInput): PurchaseOrder
  deletePurchaseOrder(input: DeletePurchaseOrderInput!, condition: ModelPurchaseOrderConditionInput): PurchaseOrder
  createPurchaseItem(input: CreatePurchaseItemInput!, condition: ModelPurchaseItemConditionInput): PurchaseItem
  updatePurchaseItem(input: UpdatePurchaseItemInput!, condition: ModelPurchaseItemConditionInput): PurchaseItem
  deletePurchaseItem(input: DeletePurchaseItemInput!, condition: ModelPurchaseItemConditionInput): PurchaseItem
  createWarehouseScan(input: CreateWarehouseScanInput!, condition: ModelWarehouseScanConditionInput): WarehouseScan
  updateWarehouseScan(input: UpdateWarehouseScanInput!, condition: ModelWarehouseScanConditionInput): WarehouseScan
  deleteWarehouseScan(input: DeleteWarehouseScanInput!, condition: ModelWarehouseScanConditionInput): WarehouseScan
}

input ModelSubscriptionStoreFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  address: ModelSubscriptionStringInput
  and: [ModelSubscriptionStoreFilterInput]
  or: [ModelSubscriptionStoreFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateStore(filter: ModelSubscriptionStoreFilterInput): Store @aws_subscribe(mutations: ["createStore"])
  onUpdateStore(filter: ModelSubscriptionStoreFilterInput): Store @aws_subscribe(mutations: ["updateStore"])
  onDeleteStore(filter: ModelSubscriptionStoreFilterInput): Store @aws_subscribe(mutations: ["deleteStore"])
  onCreateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateNotifications(filter: ModelSubscriptionNotificationsFilterInput): Notifications @aws_subscribe(mutations: ["createNotifications"])
  onUpdateNotifications(filter: ModelSubscriptionNotificationsFilterInput): Notifications @aws_subscribe(mutations: ["updateNotifications"])
  onDeleteNotifications(filter: ModelSubscriptionNotificationsFilterInput): Notifications @aws_subscribe(mutations: ["deleteNotifications"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["deleteProduct"])
  onCreateBillItem(filter: ModelSubscriptionBillItemFilterInput): BillItem @aws_subscribe(mutations: ["createBillItem"])
  onUpdateBillItem(filter: ModelSubscriptionBillItemFilterInput): BillItem @aws_subscribe(mutations: ["updateBillItem"])
  onDeleteBillItem(filter: ModelSubscriptionBillItemFilterInput): BillItem @aws_subscribe(mutations: ["deleteBillItem"])
  onCreateBill(filter: ModelSubscriptionBillFilterInput): Bill @aws_subscribe(mutations: ["createBill"])
  onUpdateBill(filter: ModelSubscriptionBillFilterInput): Bill @aws_subscribe(mutations: ["updateBill"])
  onDeleteBill(filter: ModelSubscriptionBillFilterInput): Bill @aws_subscribe(mutations: ["deleteBill"])
  onCreatePurchaseOrder(filter: ModelSubscriptionPurchaseOrderFilterInput): PurchaseOrder @aws_subscribe(mutations: ["createPurchaseOrder"])
  onUpdatePurchaseOrder(filter: ModelSubscriptionPurchaseOrderFilterInput): PurchaseOrder @aws_subscribe(mutations: ["updatePurchaseOrder"])
  onDeletePurchaseOrder(filter: ModelSubscriptionPurchaseOrderFilterInput): PurchaseOrder @aws_subscribe(mutations: ["deletePurchaseOrder"])
  onCreatePurchaseItem(filter: ModelSubscriptionPurchaseItemFilterInput): PurchaseItem @aws_subscribe(mutations: ["createPurchaseItem"])
  onUpdatePurchaseItem(filter: ModelSubscriptionPurchaseItemFilterInput): PurchaseItem @aws_subscribe(mutations: ["updatePurchaseItem"])
  onDeletePurchaseItem(filter: ModelSubscriptionPurchaseItemFilterInput): PurchaseItem @aws_subscribe(mutations: ["deletePurchaseItem"])
  onCreateWarehouseScan(filter: ModelSubscriptionWarehouseScanFilterInput): WarehouseScan @aws_subscribe(mutations: ["createWarehouseScan"])
  onUpdateWarehouseScan(filter: ModelSubscriptionWarehouseScanFilterInput): WarehouseScan @aws_subscribe(mutations: ["updateWarehouseScan"])
  onDeleteWarehouseScan(filter: ModelSubscriptionWarehouseScanFilterInput): WarehouseScan @aws_subscribe(mutations: ["deleteWarehouseScan"])
}

type ModelCategoryConnection {
  items: [Category]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
  _deleted: ModelBooleanInput
  storeCategoryId: ModelIDInput
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
  _deleted: ModelBooleanInput
  storeCategoryId: ModelIDInput
}

input CreateCategoryInput {
  id: ID
  name: String!
  description: String
  _version: Int
  storeCategoryId: ID
}

input UpdateCategoryInput {
  id: ID!
  name: String
  description: String
  _version: Int
  storeCategoryId: ID
}

input DeleteCategoryInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionCategoryFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  and: [ModelSubscriptionCategoryFilterInput]
  or: [ModelSubscriptionCategoryFilterInput]
  _deleted: ModelBooleanInput
}

type ModelNotificationsConnection {
  items: [Notifications]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelNotificationsFilterInput {
  id: ModelIDInput
  warehousequanity: ModelIntInput
  shelfquantity: ModelIntInput
  productID: ModelIDInput
  productname: ModelStringInput
  isRead: ModelBooleanInput
  isWarehouseNotification: ModelBooleanInput
  isShelfNotification: ModelBooleanInput
  and: [ModelNotificationsFilterInput]
  or: [ModelNotificationsFilterInput]
  not: ModelNotificationsFilterInput
  _deleted: ModelBooleanInput
  storeNotificationsId: ModelIDInput
}

input ModelNotificationsConditionInput {
  warehousequanity: ModelIntInput
  shelfquantity: ModelIntInput
  productID: ModelIDInput
  productname: ModelStringInput
  isRead: ModelBooleanInput
  isWarehouseNotification: ModelBooleanInput
  isShelfNotification: ModelBooleanInput
  and: [ModelNotificationsConditionInput]
  or: [ModelNotificationsConditionInput]
  not: ModelNotificationsConditionInput
  _deleted: ModelBooleanInput
  storeNotificationsId: ModelIDInput
}

input CreateNotificationsInput {
  id: ID
  warehousequanity: Int
  shelfquantity: Int
  productID: ID
  productname: String
  isRead: Boolean
  isWarehouseNotification: Boolean
  isShelfNotification: Boolean
  _version: Int
  storeNotificationsId: ID
}

input UpdateNotificationsInput {
  id: ID!
  warehousequanity: Int
  shelfquantity: Int
  productID: ID
  productname: String
  isRead: Boolean
  isWarehouseNotification: Boolean
  isShelfNotification: Boolean
  _version: Int
  storeNotificationsId: ID
}

input DeleteNotificationsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionNotificationsFilterInput {
  id: ModelSubscriptionIDInput
  warehousequanity: ModelSubscriptionIntInput
  shelfquantity: ModelSubscriptionIntInput
  productID: ModelSubscriptionIDInput
  productname: ModelSubscriptionStringInput
  isRead: ModelSubscriptionBooleanInput
  isWarehouseNotification: ModelSubscriptionBooleanInput
  isShelfNotification: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionNotificationsFilterInput]
  or: [ModelSubscriptionNotificationsFilterInput]
  _deleted: ModelBooleanInput
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserRoleInput {
  eq: UserRole
  ne: UserRole
}

input ModelUserFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  username: ModelStringInput
  phonenumber: ModelStringInput
  image: ModelStringInput
  role: ModelUserRoleInput
  idcardimage: ModelStringInput
  bills: ModelStringInput
  purchaseOrders: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  _deleted: ModelBooleanInput
  storeUsersId: ModelIDInput
}

input ModelUserConditionInput {
  userId: ModelIDInput
  username: ModelStringInput
  phonenumber: ModelStringInput
  image: ModelStringInput
  role: ModelUserRoleInput
  idcardimage: ModelStringInput
  bills: ModelStringInput
  purchaseOrders: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  _deleted: ModelBooleanInput
  storeUsersId: ModelIDInput
}

input CreateUserInput {
  id: ID
  userId: ID!
  username: String!
  phonenumber: String!
  image: String
  role: UserRole!
  idcardimage: [String]
  bills: String
  purchaseOrders: String
  _version: Int
  storeUsersId: ID
}

input UpdateUserInput {
  id: ID!
  userId: ID
  username: String
  phonenumber: String
  image: String
  role: UserRole
  idcardimage: [String]
  bills: String
  purchaseOrders: String
  _version: Int
  storeUsersId: ID
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  phonenumber: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  idcardimage: ModelSubscriptionStringInput
  bills: ModelSubscriptionStringInput
  purchaseOrders: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  _deleted: ModelBooleanInput
}

type ModelProductConnection {
  items: [Product]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProductFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  barcode: ModelStringInput
  image: ModelStringInput
  price: ModelFloatInput
  manufacturer: ModelStringInput
  category: ModelStringInput
  warehouseQuantity: ModelIntInput
  shelfQuantity: ModelIntInput
  warehouseInventoryLimit: ModelIntInput
  shelfInventoryLimit: ModelIntInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
  _deleted: ModelBooleanInput
  storeProductsId: ModelIDInput
  categoryProductId: ModelIDInput
}

input ModelProductConditionInput {
  name: ModelStringInput
  barcode: ModelStringInput
  image: ModelStringInput
  price: ModelFloatInput
  manufacturer: ModelStringInput
  category: ModelStringInput
  warehouseQuantity: ModelIntInput
  shelfQuantity: ModelIntInput
  warehouseInventoryLimit: ModelIntInput
  shelfInventoryLimit: ModelIntInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
  _deleted: ModelBooleanInput
  storeProductsId: ModelIDInput
  categoryProductId: ModelIDInput
}

input CreateProductInput {
  id: ID
  name: String!
  barcode: String!
  image: String
  price: Float!
  manufacturer: String
  category: String
  warehouseQuantity: Int!
  shelfQuantity: Int!
  warehouseInventoryLimit: Int
  shelfInventoryLimit: Int
  _version: Int
  storeProductsId: ID
  categoryProductId: ID
}

input UpdateProductInput {
  id: ID!
  name: String
  barcode: String
  image: String
  price: Float
  manufacturer: String
  category: String
  warehouseQuantity: Int
  shelfQuantity: Int
  warehouseInventoryLimit: Int
  shelfInventoryLimit: Int
  _version: Int
  storeProductsId: ID
  categoryProductId: ID
}

input DeleteProductInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionProductFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  barcode: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  price: ModelSubscriptionFloatInput
  manufacturer: ModelSubscriptionStringInput
  category: ModelSubscriptionStringInput
  warehouseQuantity: ModelSubscriptionIntInput
  shelfQuantity: ModelSubscriptionIntInput
  warehouseInventoryLimit: ModelSubscriptionIntInput
  shelfInventoryLimit: ModelSubscriptionIntInput
  and: [ModelSubscriptionProductFilterInput]
  or: [ModelSubscriptionProductFilterInput]
  _deleted: ModelBooleanInput
}

type ModelBillItemConnection {
  items: [BillItem]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelBillItemFilterInput {
  id: ModelIDInput
  productName: ModelStringInput
  quantity: ModelIntInput
  productPrice: ModelFloatInput
  subtotal: ModelFloatInput
  category: ModelStringInput
  manufacturer: ModelStringInput
  and: [ModelBillItemFilterInput]
  or: [ModelBillItemFilterInput]
  not: ModelBillItemFilterInput
  _deleted: ModelBooleanInput
  storeBillItemsId: ModelIDInput
  productBillItemsId: ModelIDInput
  billItemsId: ModelIDInput
}

input ModelBillItemConditionInput {
  productName: ModelStringInput
  quantity: ModelIntInput
  productPrice: ModelFloatInput
  subtotal: ModelFloatInput
  category: ModelStringInput
  manufacturer: ModelStringInput
  and: [ModelBillItemConditionInput]
  or: [ModelBillItemConditionInput]
  not: ModelBillItemConditionInput
  _deleted: ModelBooleanInput
  storeBillItemsId: ModelIDInput
  productBillItemsId: ModelIDInput
  billItemsId: ModelIDInput
}

input CreateBillItemInput {
  id: ID
  productName: String
  quantity: Int!
  productPrice: Float!
  subtotal: Float!
  category: String
  manufacturer: String
  _version: Int
  storeBillItemsId: ID
  productBillItemsId: ID
  billItemsId: ID!
}

input UpdateBillItemInput {
  id: ID!
  productName: String
  quantity: Int
  productPrice: Float
  subtotal: Float
  category: String
  manufacturer: String
  _version: Int
  storeBillItemsId: ID
  productBillItemsId: ID
  billItemsId: ID
}

input DeleteBillItemInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionBillItemFilterInput {
  id: ModelSubscriptionIDInput
  productName: ModelSubscriptionStringInput
  quantity: ModelSubscriptionIntInput
  productPrice: ModelSubscriptionFloatInput
  subtotal: ModelSubscriptionFloatInput
  category: ModelSubscriptionStringInput
  manufacturer: ModelSubscriptionStringInput
  and: [ModelSubscriptionBillItemFilterInput]
  or: [ModelSubscriptionBillItemFilterInput]
  _deleted: ModelBooleanInput
}

type ModelBillConnection {
  items: [Bill]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelBillStatusInput {
  eq: BillStatus
  ne: BillStatus
}

input ModelBillFilterInput {
  id: ModelIDInput
  cashier: ModelStringInput
  cashierName: ModelStringInput
  totalAmount: ModelFloatInput
  status: ModelBillStatusInput
  and: [ModelBillFilterInput]
  or: [ModelBillFilterInput]
  not: ModelBillFilterInput
  _deleted: ModelBooleanInput
  storeBillsId: ModelIDInput
}

input ModelBillConditionInput {
  cashier: ModelStringInput
  cashierName: ModelStringInput
  totalAmount: ModelFloatInput
  status: ModelBillStatusInput
  and: [ModelBillConditionInput]
  or: [ModelBillConditionInput]
  not: ModelBillConditionInput
  _deleted: ModelBooleanInput
  storeBillsId: ModelIDInput
}

input CreateBillInput {
  id: ID
  cashier: String!
  cashierName: String
  totalAmount: Float!
  status: BillStatus!
  _version: Int
  storeBillsId: ID
}

input UpdateBillInput {
  id: ID!
  cashier: String
  cashierName: String
  totalAmount: Float
  status: BillStatus
  _version: Int
  storeBillsId: ID
}

input DeleteBillInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionBillFilterInput {
  id: ModelSubscriptionIDInput
  cashier: ModelSubscriptionStringInput
  cashierName: ModelSubscriptionStringInput
  totalAmount: ModelSubscriptionFloatInput
  status: ModelSubscriptionStringInput
  and: [ModelSubscriptionBillFilterInput]
  or: [ModelSubscriptionBillFilterInput]
  _deleted: ModelBooleanInput
}

type ModelPurchaseOrderConnection {
  items: [PurchaseOrder]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPurchaseOrderFilterInput {
  id: ModelIDInput
  purchaser: ModelIDInput
  purchaserName: ModelStringInput
  vendor: ModelStringInput
  totalAmount: ModelFloatInput
  status: ModelBillStatusInput
  and: [ModelPurchaseOrderFilterInput]
  or: [ModelPurchaseOrderFilterInput]
  not: ModelPurchaseOrderFilterInput
  _deleted: ModelBooleanInput
  storePurchaseOrderId: ModelIDInput
}

input ModelPurchaseOrderConditionInput {
  purchaser: ModelIDInput
  purchaserName: ModelStringInput
  vendor: ModelStringInput
  totalAmount: ModelFloatInput
  status: ModelBillStatusInput
  and: [ModelPurchaseOrderConditionInput]
  or: [ModelPurchaseOrderConditionInput]
  not: ModelPurchaseOrderConditionInput
  _deleted: ModelBooleanInput
  storePurchaseOrderId: ModelIDInput
}

input CreatePurchaseOrderInput {
  id: ID
  purchaser: ID!
  purchaserName: String
  vendor: String
  totalAmount: Float!
  status: BillStatus
  _version: Int
  storePurchaseOrderId: ID
}

input UpdatePurchaseOrderInput {
  id: ID!
  purchaser: ID
  purchaserName: String
  vendor: String
  totalAmount: Float
  status: BillStatus
  _version: Int
  storePurchaseOrderId: ID
}

input DeletePurchaseOrderInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionPurchaseOrderFilterInput {
  id: ModelSubscriptionIDInput
  purchaser: ModelSubscriptionIDInput
  purchaserName: ModelSubscriptionStringInput
  vendor: ModelSubscriptionStringInput
  totalAmount: ModelSubscriptionFloatInput
  status: ModelSubscriptionStringInput
  and: [ModelSubscriptionPurchaseOrderFilterInput]
  or: [ModelSubscriptionPurchaseOrderFilterInput]
  _deleted: ModelBooleanInput
}

type ModelPurchaseItemConnection {
  items: [PurchaseItem]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPurchaseItemFilterInput {
  id: ModelIDInput
  productName: ModelStringInput
  productPrice: ModelFloatInput
  quantityOrdered: ModelIntInput
  quantityReceived: ModelIntInput
  and: [ModelPurchaseItemFilterInput]
  or: [ModelPurchaseItemFilterInput]
  not: ModelPurchaseItemFilterInput
  _deleted: ModelBooleanInput
  productPurchaseItemsId: ModelIDInput
  purchaseOrderItemsId: ModelIDInput
  purchaseOrderPurchaseItemsId: ModelIDInput
}

input ModelPurchaseItemConditionInput {
  productName: ModelStringInput
  productPrice: ModelFloatInput
  quantityOrdered: ModelIntInput
  quantityReceived: ModelIntInput
  and: [ModelPurchaseItemConditionInput]
  or: [ModelPurchaseItemConditionInput]
  not: ModelPurchaseItemConditionInput
  _deleted: ModelBooleanInput
  productPurchaseItemsId: ModelIDInput
  purchaseOrderItemsId: ModelIDInput
  purchaseOrderPurchaseItemsId: ModelIDInput
}

input CreatePurchaseItemInput {
  id: ID
  productName: String
  productPrice: Float
  quantityOrdered: Int!
  quantityReceived: Int!
  _version: Int
  productPurchaseItemsId: ID
  purchaseOrderItemsId: ID!
  purchaseOrderPurchaseItemsId: ID
}

input UpdatePurchaseItemInput {
  id: ID!
  productName: String
  productPrice: Float
  quantityOrdered: Int
  quantityReceived: Int
  _version: Int
  productPurchaseItemsId: ID
  purchaseOrderItemsId: ID
  purchaseOrderPurchaseItemsId: ID
}

input DeletePurchaseItemInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionPurchaseItemFilterInput {
  id: ModelSubscriptionIDInput
  productName: ModelSubscriptionStringInput
  productPrice: ModelSubscriptionFloatInput
  quantityOrdered: ModelSubscriptionIntInput
  quantityReceived: ModelSubscriptionIntInput
  and: [ModelSubscriptionPurchaseItemFilterInput]
  or: [ModelSubscriptionPurchaseItemFilterInput]
  _deleted: ModelBooleanInput
}

type ModelWarehouseScanConnection {
  items: [WarehouseScan]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelWarehouseScanFilterInput {
  id: ModelIDInput
  scannedBy: ModelIDInput
  scannedByName: ModelStringInput
  productId: ModelIDInput
  productName: ModelStringInput
  productQuantity: ModelIntInput
  and: [ModelWarehouseScanFilterInput]
  or: [ModelWarehouseScanFilterInput]
  not: ModelWarehouseScanFilterInput
  _deleted: ModelBooleanInput
  storeWarehouseScanId: ModelIDInput
}

input ModelWarehouseScanConditionInput {
  scannedBy: ModelIDInput
  scannedByName: ModelStringInput
  productId: ModelIDInput
  productName: ModelStringInput
  productQuantity: ModelIntInput
  and: [ModelWarehouseScanConditionInput]
  or: [ModelWarehouseScanConditionInput]
  not: ModelWarehouseScanConditionInput
  _deleted: ModelBooleanInput
  storeWarehouseScanId: ModelIDInput
}

input CreateWarehouseScanInput {
  id: ID
  scannedBy: ID
  scannedByName: String
  productId: ID
  productName: String
  productQuantity: Int
  _version: Int
  storeWarehouseScanId: ID
}

input UpdateWarehouseScanInput {
  id: ID!
  scannedBy: ID
  scannedByName: String
  productId: ID
  productName: String
  productQuantity: Int
  _version: Int
  storeWarehouseScanId: ID
}

input DeleteWarehouseScanInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionWarehouseScanFilterInput {
  id: ModelSubscriptionIDInput
  scannedBy: ModelSubscriptionIDInput
  scannedByName: ModelSubscriptionStringInput
  productId: ModelSubscriptionIDInput
  productName: ModelSubscriptionStringInput
  productQuantity: ModelSubscriptionIntInput
  and: [ModelSubscriptionWarehouseScanFilterInput]
  or: [ModelSubscriptionWarehouseScanFilterInput]
  _deleted: ModelBooleanInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}
